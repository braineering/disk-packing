#===============================================================================
# DISK PACKING PROBLEM (Script for tests)
#
# Authors: Giacomo Marciani <gmarciani@acm.org>
#          Michele Porretta <mporretta@acm.org>
#===============================================================================

reset;
reset options;

#===============================================================================
# PROBLEM DECLARATION
#===============================================================================
model disk-packing.mod;
data disk-packing.dat;

#===============================================================================
# AMPL OPTIONS
#===============================================================================
option prompt1 "[AMPL]> ";
option display_width 80;
option display_1col 0;
option relax_integrality 1;

#===============================================================================
# OUTPUT PARAMETERS
#===============================================================================
param fileTest symbolic; # output file for results
#param fileLog symbolic; # output file for detailed log

let fileTest := ("out/out-"&N&"_test.txt");
#let fileLog := ("out/out-"&N&"_log.txt");

#===============================================================================
# SOLVER OPTIONS
#===============================================================================
option knitro_options "outlev=1";
option solver knitro;

#===============================================================================
# HEADER
#===============================================================================
param header symbolic; # file header
let header := sprintf(
"#===============================================================================\
| DISK PACKING PROBLEM \
| Model : disk-packing.mod \
| Data  : disk-packing.dat \
| Solver: KNITRO \
| Author: Giacomo Marciani <gmarciani@acm.org> \
|         Michele Porretta <mporretta@acm.org> \
|\
| Parameters: \
|  N: %d \
#===============================================================================\
", N);

print header > (fileTest);
#print header > (fileLog);

printf "Elapsed Time\tLocal optimizations\tObjective\n" >> (fileTest);

#===============================================================================
# PROBLEM PARAMETERS
#===============================================================================
param Xlb := 0.0; # lower bound for disks center (X coordinate)
param Xub := 1.0; # upper bound for disks center (X coordinate)
param Ylb := 0.0; # lower bound for disks center (Y coordinate)
param Yub := 1.0; # upper bound for disks center (Y coordinate)
#param Flb := 0.0; # lower bound for objective function

#===============================================================================
# ALGORITHM PARAMETERS
#===============================================================================
param Xstart{1..N};  # initial    disks center (X coordinate)
param Ystart{1..N};  # initial    disks center (Y coordinate)
param Xlocal{1..N};  # local      disks center (X coordinate)
param Ylocal{1..N};  # local      disks center (Y coordinate)
param Xtilde{1..N};  # perturbed  disks center (X coordinate)
param Ytilde{1..N};  # perturbed  disks center (Y coordinate)

param Xbest{1..N};   # local best disks center (X coordinate)
param Ybest{1..N};   # local best disks center (Y coordinate)
param Xmax{1..N};    # best       disks center (X coordinate)
param Ymax{1..N};    # best       disks center (Y coordinate)

param Xpert{1..N};   # perturbation for disks center (X coordinate)
param Ypert{1..N};   # perturbation for disks center (Y coordinate)
param XpertLb{1..N}; # lower bound for perturbation (X coordinate)
param XpertUb{1..N}; # upper bound for perturbation (X coordinate)
param YpertUb{1..N}; # lower bound for perturbation (X coordinate)
param YpertLb{1..N}; # lower bound for perturbation (X coordinate)
param xi;            # perturbation degree
#param FpertUb;      # upper bound for pertubation (objective function)

param maxSearch;     # maximum number of outer loop iterations
param maxNoImprove;  # maximum number of optimization steps with no improvement
param noImprove;     # number of local steps with no improvement
param nLocalOpt;     # number of local optimization steps

param fBest;         # objective function for current local best
param fMax;          # objective function for current best
param fStar;         # objective function for global optimum

param error;         # error w.r.t. Fstar
param epsilon;       # epsilon (used for error tolerance)

param startTime;     # the time at the beginning of an iteration
param endTime;       # the time at the end of an iteration

for {iter in 1..10} { # for iter in 1..10

let maxSearch := 1000;
let maxNoImprove := 100;
let noImprove := 0;
let nLocalOpt := 0;

let fBest := 0.0;
let fMax  := 0.0;
let fStar := FSTAR[N];
let epsilon := 0.0001;
let xi := 0.5 / sqrt(N);

let startTime := _ampl_elapsed_time; # reset start time
let nLocalOpt := 0;                  # reset number of local optimizations

for {k in 1..maxSearch}{ # for k in maxSearch
  #=============================================================================
  # START
  #=============================================================================
  let {i in 1..N} Xstart[i] := Uniform(Xlb,Xub); # random initial disks center (X coordinate)
  let {i in 1..N} Ystart[i] := Uniform(Ylb,Yub); # random initial disks center (Y coordinate)
  let {i in 1..N} X[i] := Xstart[i];             # set decision variables to random initial disks center (X coordinate)
  let {i in 1..N} Y[i] := Ystart[i];             # set decision variables to random initial disks center (X coordinate)

  #=============================================================================
  # LOCAL OPTIMIZATION
  #=============================================================================
  solve; # local optimization step
  let nLocalOpt := nLocalOpt+1; # increment number of local optimization steps

  #=============================================================================
  # UPDATE
  #=============================================================================
  if (solve_result_num == 0) then { # if solve_result_num == 0
    let {i in 1..N} Xlocal[i] := X[i];     # update local disks center (X coordinate)
    let {i in 1..N} Ylocal[i] := Y[i];     # update local disks center (Y coordinate)
    let fBest := f;                        # update local best for objective function
    let {i in 1..N} Xbest[i] := Xlocal[i]; # update local best for disks center (X coordinate)
    let {i in 1..N} Ybest[i] := Ylocal[i]; # update local best for disks center (Y coordinate)
    #printf "Found stationary point with objective function f = %.12f\n", f >> (fileLog);

    #===========================================================================
    # EVALUATE UPDATE
    #===========================================================================
    if (fBest > fMax) then { # if fBest > fMax
      let fMax := fBest;                    # update maximum for objective function with local best
      let {i in 1..N} Xmax[i] := Xlocal[i]; # update maximum for disks center (X coordinate)
      let {i in 1..N} Ymax[i] := Ylocal[i]; # update maximum for disks center (Y coordinate)
      let error := abs(fStar-fMax);         # error w.r.t to Fstar
      if (error < epsilon) then { # if error < epsilon
        #printf "Found global optimum with error %.12f\n", error >> (fileLog);
        break;
      } # if error < epsilon
    } # if fBest > fMax
  }
  else { # if solve_result_num != 0
    repeat { # repeat until solve_result_num == 0
      #=========================================================================
      # REPEAT: START
      #=========================================================================
      let {i in 1..N} Xstart[i] := Uniform(Xlb,Xub); # random initial disks center (X coordinate)
      let {i in 1..N} Ystart[i] := Uniform(Ylb,Yub); # random initial disks center (Y coordinate)
      let {i in 1..N} X[i] := Xstart[i];             # set decision variables to random initial disks center (X coordinate)
      let {i in 1..N} Y[i] := Ystart[i];             # set decision variables to random initial disks center (X coordinate)

      #=========================================================================
      # REPEAT: LOCAL OPTIMIZATION
      #=========================================================================
      solve; # local optimization step
      let nLocalOpt := nLocalOpt + 1; # increment number of local optimization steps
    } until (solve_result_num == 0);  # end repeat until solve_result_num == 0

    #===========================================================================
    # REPEAT: UPDATE
    #===========================================================================
    let {i in 1..N} Xlocal[i] := X[i];     # update local disks center (X coordinate)
    let {i in 1..N} Ylocal[i] := Y[i];     # update local disks center (Y coordinate)
    let fBest := f;                        # update local best for objective function
    let {i in 1..N} Xbest[i] := Xlocal[i]; # update local best for disks center (X coordinate)
    let {i in 1..N} Ybest[i] := Ylocal[i]; # update local best for disks center (Y coordinate)
    #printf "Found stationary point with objective function f = %.12f\n", f >> (fileLog);

    #===========================================================================
    # REPEAT: EVALUATE UPDATE
    #===========================================================================
    if (fBest > fMax) then { # if fBest > fMax
      let fMax := fBest;                    # update maximum for objective function with local best
      let {i in 1..N} Xmax[i] := Xlocal[i]; # update maximum for disks center (X coordinate)
      let {i in 1..N} Ymax[i] := Ylocal[i]; # update maximum for disks center (Y coordinate)
      let error := abs(fStar-fMax);         # error w.r.t to Fstar
      if (error < epsilon) then { # if error < epsilon
        #printf "Found global optimum with error %.12f\n", error >> (fileLog);
        break;
      } # if error < epsilon
    } # if fBest > fMax
  } # if solve_result_num != 0

  let error := abs(fStar-fMax); # error w.r.t to Fstar
  if (error < epsilon) then { # if error < epsilon
    #printf "Found global optimum with error %.12f\n", error >> (fileLog);
    break;
  } # if error < epsilon

  #=============================================================================
  # LOOP
  #=============================================================================
  repeat while (noImprove <= maxNoImprove) { # repeat while (noImprove <= maxNoImprove)
    #===========================================================================
    # PERTURBATION (TYPE 1)
    #===========================================================================
    #let {i in 1..N} XpertLb[i] := (-1) * alpha * (Xlocal[i]-Xlb);  # set lower bound for perturbation (X coordinate)
    #let {i in 1..N} XpertUb[i] :=        alpha * (Xub-Xlocal[i]);  # set upper bound for perturbation (X coordinate)
    #let {i in 1..N} YpertLb[i] := (-1) * alpha * (Ylocal[i]-Ylb);  # set lower bound for perturbation (Y coordinate)
    #let {i in 1..N} YpertUb[i] :=        alpha * (Yub-Ylocal[i]);  # set upper bound for perturbation (Y coordinate)
    #let {i in 1..N} Xpert[i] := Uniform(XpertLb[i],XpertUb[i]);    # random perturbation for disks center (X coordinate)
    #let {i in 1..N} Ypert[i] := Uniform(YpertLb[i],YpertUb[i]);    # random perturbation for disks center (Y coordinate)
    #let {i in 1..N} Xtilde[i] := Xlocal[i]+Xpert[i];               # set random perturbation for disks center (X coordinate)
    #let {i in 1..N} Ytilde[i] := Ylocal[i]+Ypert[i];               # set random perturbation for disks center (Y coordinate)
    #let {i in 1..N} X[i] := Xtilde[i];                             # set decision variables to random perturbation for disks center (X coordinate)
    #let {i in 1..N} Y[i] := Ytilde[i];                             # set decision variables to random perturbation for disks center (Y coordinate)
    #printf "Perturbed starting point with objective function value f = %12.6f\n", f >> (fileLog);

    #===========================================================================
    # PERTURBATION (TYPE 2)
    #===========================================================================
    let {i in 1..N} XpertLb[i] := max(0.0, Xlocal[i]-xi);  # set lower bound for perturbation (X coordinate)
    let {i in 1..N} XpertUb[i] := min(1.0, Xlocal[i]+xi);  # set upper bound for perturbation (X coordinate)
    let {i in 1..N} YpertLb[i] := max(0.0, Ylocal[i]-xi);  # set lower bound for perturbation (Y coordinate)
    let {i in 1..N} YpertUb[i] := min(1.0, Ylocal[i]+xi);  # set upper bound for perturbation (Y coordinate)
    let {i in 1..N} Xtilde[i] := Uniform(XpertLb[i],XpertUb[i]);   # set random perturbed disks center (X coordinate)
    let {i in 1..N} Ytilde[i] := Uniform(YpertLb[i],YpertUb[i]);   # set random perturbed disks center (Y coordinate)
    let {i in 1..N} X[i] := Xtilde[i];                             # set decision variables to random perturbed disks center (X coordinate)
    let {i in 1..N} Y[i] := Ytilde[i];                             # set decision variables to random perturbed disks center (Y coordinate)
    #let FpertUb := min{i in 1..N, j in 1..N: i != j}
    #  (sqrt((Xtilde[i]-Xtilde[j])**2+(Ytilde[i]-Ytilde[j])**2));   # set upper bound for perurbed objective function
    #let f := Uniform(Flb, FpertUb);                                 # set random perturbed objective function
    #printf "Perturbed starting point with objective function value f = %.12f\n", f >> (fileLog);

    #===========================================================================
    # PERTURBATION: LOCAL OPTIMIZATION
    #===========================================================================
    solve; # local optimization step
    let nLocalOpt := nLocalOpt+1; # increment number of local optimization steps
    #printf "Perturbed starting point with objective function value f = %.12f\n", f >> (fileLog);

    if (f > fBest) && (solve_result_num == 0) then { # if (f > fBest) && (solve_result_num == 0)
      #===========================================================================
      # IMPROVE: UPDATE
      #===========================================================================
      let {i in 1..N} Xlocal[i] := X[i];     # local update for disks center (X coordinate)
      let {i in 1..N} Ylocal[i] := Y[i];     # local update for disks center (Y coordinate)
      let fBest := f;                        # local update for objective function
      let {i in 1..N} Xbest[i] := Xlocal[i]; # local best update for disks center (X coordinate)
      let {i in 1..N} Ybest[i] := Ylocal[i]; # local best update for disks center (Y coordinate)
      let noImprove := 0;                    # reset number of optimization step with no improvement
      #printf "Found better stationary point with objective function f = %.12f\n", f >> (fileLog);

      if (fBest > fMax) then { # if fBest > fMax
        let fMax := fBest;                    # update maximum of objective function with local best
        let {i in 1..N} Xmax[i] := Xlocal[i]; # update disks center (X coordinate)
        let {i in 1..N} Ymax[i] := Ylocal[i]; # update disks center (Y coordinate)
        let error := abs(fStar-fMax);         # error w.r.t to Fstar
        if (error < epsilon) then { # if error < epsilon
          #printf "Found global optimum with error %.12f\n", error >> (fileLog);
          break;
        } # if error < epsilon
      } # if fBest > fMax
    } # if (f > fBest) && (solve_result_num == 0)
    else { # if (f <= fBest) || (solve_result_num != 0)
      let noImprove := noImprove+1; # increment number of steps with no improvement
      #printf "No improvement for perturbed point\n" >> (fileLog);
    } # if (f <= fBest) || (solve_result_num != 0)
  } # repeat while (noImprove <= maxNoImprove)

  let error := abs(fStar-fMax); # error w.r.t to Fstar
  if (error < epsilon) then { # if error < epsilon
    #printf "Found global optimum with error %.12f\n", error >> (fileLog);
    break;
  } # if error < epsilon

  let noImprove := 0; # reset number of steps with no improvement
} # for k in 1..maxSearch

let endTime := _ampl_elapsed_time; # set end time

#===============================================================================
# SHOW RESULTS
#===============================================================================
printf "%.12f\t%d\t%.12f\n", (endTime-startTime), nLocalOpt, fMax >> (fileTest);

#===============================================================================
# RESET
#===============================================================================
reset data Xstart;  # initial    disks center (X coordinate)
reset data Ystart;  # initial    disks center (Y coordinate)
reset data Xlocal;  # local      disks center (X coordinate)
reset data Ylocal;  # local      disks center (Y coordinate)
reset data Xtilde;  # perturbed  disks center (X coordinate)
reset data Ytilde;  # perturbed  disks center (Y coordinate)

reset data Xbest;   # local best disks center (X coordinate)
reset data Ybest;   # local best disks center (Y coordinate)
reset data Xmax;    # best       disks center (X coordinate)
reset data Ymax;    # best       disks center (Y coordinate)

reset data Xpert;   # perturbation for disks center (X coordinate)
reset data Ypert;   # perturbation for disks center (Y coordinate)
reset data XpertLb; # lower bound for perturbation (X coordinate)
reset data XpertUb; # upper bound for perturbation (X coordinate)
reset data YpertUb; # lower bound for perturbation (X coordinate)
reset data YpertLb; # lower bound for perturbation (X coordinate)
reset data xi;            # perturbation degree
#reset data FpertUb;      # upper bound for pertubation (objective function)

reset data maxSearch;     # maximum number of outer loop iterations
reset data maxNoImprove;  # maximum number of optimization steps with no improvement
reset data noImprove;     # number of local steps with no improvement
reset data nLocalOpt;     # number of local optimization steps

reset data fBest;         # objective function for current local best
reset data fMax;          # objective function for current best
reset data fStar;         # objective function for global optimum

reset data error;         # error w.r.t. Fstar
reset data epsilon;       # epsilon (used for error tolerance)

reset data startTime;     # the time at the beginning of an iteration
reset data endTime;       # the time at the end of an iteration

} # for iter in 1..10
